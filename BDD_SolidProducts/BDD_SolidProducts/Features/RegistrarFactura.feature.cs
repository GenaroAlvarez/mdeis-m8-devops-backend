// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BDD_SolidProducts.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Registro de Factura de Venta")]
    public partial class RegistroDeFacturaDeVentaFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Registro de Factura de Venta", "  Como administrador del sistema\r\n  Quiero registrar facturas de venta\r\n  Para do" +
                "cumentar las transacciones con clientes", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "RegistrarFactura.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Registrar factura con un producto")]
        public async System.Threading.Tasks.Task RegistrarFacturaConUnProducto()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registrar factura con un producto", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
    await testRunner.GivenAsync("que la aplicacion esta desplegada correctamente", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "Nit",
                            "BusinessName",
                            "ClientId",
                            "PaymentConditionId"});
                table3.AddRow(new string[] {
                            "12345678",
                            "Empresa ABC",
                            "1",
                            "1"});
#line 8
    await testRunner.WhenAsync("el usuario ingresa los datos de la factura:", ((string)(null)), table3, "When ");
#line hidden
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "ProductId",
                            "Price",
                            "Quantity",
                            "Discount",
                            "WarehouseId"});
                table4.AddRow(new string[] {
                            "10",
                            "100",
                            "2",
                            "10",
                            "1"});
#line 11
    await testRunner.AndAsync("agrega los siguientes productos a la factura:", ((string)(null)), table4, "And ");
#line hidden
#line 14
    await testRunner.AndAsync("confirma el registro de la factura", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 15
    await testRunner.ThenAsync("se muestra el mensaje de la factura \"Factura registrada exitosamente\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Intentar registrar una factura sin productos")]
        public async System.Threading.Tasks.Task IntentarRegistrarUnaFacturaSinProductos()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Intentar registrar una factura sin productos", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 17
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 18
    await testRunner.GivenAsync("que la aplicacion esta desplegada correctamente", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "Nit",
                            "BusinessName",
                            "ClientId",
                            "PaymentConditionId"});
                table5.AddRow(new string[] {
                            "87654321",
                            "Empresa XYZ",
                            "2",
                            "1"});
#line 19
    await testRunner.WhenAsync("el usuario ingresa los datos de la factura:", ((string)(null)), table5, "When ");
#line hidden
#line 22
    await testRunner.AndAsync("no agrega productos a la factura", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 23
    await testRunner.AndAsync("confirma el registro de la factura", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 24
    await testRunner.ThenAsync("se muestra el mensaje de la factura \"La factura no tiene detalles validos\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Intentar registrar factura con subtotal negativo")]
        public async System.Threading.Tasks.Task IntentarRegistrarFacturaConSubtotalNegativo()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Intentar registrar factura con subtotal negativo", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 27
    await testRunner.GivenAsync("que la aplicacion esta desplegada correctamente", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                            "Nit",
                            "BusinessName",
                            "ClientId",
                            "PaymentConditionId"});
                table6.AddRow(new string[] {
                            "12345678",
                            "Empresa XYZ",
                            "2",
                            "1"});
#line 28
    await testRunner.WhenAsync("el usuario ingresa los datos de la factura:", ((string)(null)), table6, "When ");
#line hidden
                global::Reqnroll.Table table7 = new global::Reqnroll.Table(new string[] {
                            "ProductId",
                            "Price",
                            "Quantity",
                            "Discount",
                            "WarehouseId"});
                table7.AddRow(new string[] {
                            "10",
                            "50",
                            "1",
                            "60",
                            "1"});
#line 31
    await testRunner.AndAsync("agrega los siguientes productos a la factura:", ((string)(null)), table7, "And ");
#line hidden
#line 34
    await testRunner.AndAsync("confirma el registro de la factura", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 35
    await testRunner.ThenAsync("se muestra el mensaje de la factura \"Subtotal invalido en producto\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Registrar factura con multiples productos")]
        public async System.Threading.Tasks.Task RegistrarFacturaConMultiplesProductos()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registrar factura con multiples productos", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 38
    await testRunner.GivenAsync("que la aplicacion esta desplegada correctamente", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table8 = new global::Reqnroll.Table(new string[] {
                            "Nit",
                            "BusinessName",
                            "ClientId",
                            "PaymentConditionId"});
                table8.AddRow(new string[] {
                            "12345678",
                            "Multiventas",
                            "3",
                            "2"});
#line 39
    await testRunner.WhenAsync("el usuario ingresa los datos de la factura:", ((string)(null)), table8, "When ");
#line hidden
                global::Reqnroll.Table table9 = new global::Reqnroll.Table(new string[] {
                            "ProductId",
                            "Price",
                            "Quantity",
                            "Discount",
                            "WarehouseId"});
                table9.AddRow(new string[] {
                            "101",
                            "50",
                            "2",
                            "5",
                            "1"});
                table9.AddRow(new string[] {
                            "102",
                            "100",
                            "1",
                            "0",
                            "1"});
                table9.AddRow(new string[] {
                            "103",
                            "20",
                            "5",
                            "10",
                            "1"});
#line 42
      await testRunner.AndAsync("agrega los siguientes productos a la factura:", ((string)(null)), table9, "And ");
#line hidden
#line 47
      await testRunner.AndAsync("confirma el registro de la factura", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 48
      await testRunner.ThenAsync("se muestra el mensaje de la factura \"Factura registrada exitosamente\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
